1天编写，1天调试，陆陆续续优化了3天，还是挺累的！！
边写边改非常的情况下，一开始还是挺痛苦的，以后真的需要先动笔策划一番！

总结一下几点遇到的比较困扰的问题：

1，关于到顶拉扯值的处理：

问题产生：一开始是非常愚蠢的使用一个永远正值的dragSpace全局变量存储拉扯值，一直没有考虑滑动距离和拉扯值的关系，
	  所以，不仅判断dragSpace匀速递减时浪费CPU（加了好几层的if语句）,而且要增加 手指滑动方向的判断！否则不管
	  上滑还是下滑，拉扯距离都会无限增加。

解决方案：只要使用手指移动距离的值*一个小数就完全解决了！（不过手指移动距离需要不断的在 move 事件里面获取）
	  拉扯值的计算就是 【手指start的坐标】 + 【手指移动距离】*0.3；

2，需不需要手写上下滚动条？？

问题产生：在普通业务的情况下，应该不需要手写滚动条，使用原生的滚动条系统就够用了，
	  但是如果需要兼容远程协助的时候，需要实时判断滚动停止之后的坐标。
	  
解决方案：如果改写jq的on([scrollstart|scrollend])事件的话，结果会使触摸事件之间的联系不可控（待求证），
	  如果在 触摸事件 end 之后添加监听器，那么在用户连续点击的情况下，可控性和可靠性如果又不清楚，
	  但是，如果手写滚动条，在逻辑上是很清晰的，滚动距离完全可控，所以，最稳健的还是手写滚动条


3，上下滚动条缓动的优化