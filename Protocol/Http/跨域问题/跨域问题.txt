#跨域就是A系统的客户端需要获取B系统服务器的数据（两个系统分别挂靠两个主域名）；
#产生的跨域问题就是使用ajax获取跨域的资源时，不被允许！

#原生的处理方式就是，让服务器生成一个js文件，然后客户端使用script标签的src调用这个js文件！！
#就相当于 <script src="http://cdn.static.runoob.com/libs/jquery/2.1.1/jquery.min.js"></script>，这就是一个跨域行为！！
#html里面所有带src属性的都是可以跨域的标签！

exp:
------客户端
    <script type="text/javascript">
    var localHandler = function(data){
        alert('我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：' + data.result);
    };
    </script>
    <script type="text/javascript" src="http://remoteserver.com/remote.js"></script>

------服务端remote.js的内容
    localHandler({"result":"我是远程js带来的数据"});



###进一步优化步骤；

------客户端
    <script type="text/javascript">
    // 得到航班信息查询结果后的回调函数
    var flightHandler = function(data){
        alert('你查询的航班结果是：票价 ' + data.price + ' 元，' + '余票 ' + data.tickets + ' 张。');
    };
    // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）
    var url = "http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&callback=flightHandler";
    // 创建script标签，设置其属性
    var script = document.createElement('script');
    script.setAttribute('src', url);
    // 把script标签加入head，此时调用开始
    document.getElementsByTagName('head')[0].appendChild(script);
    </script>

------服务端会返回以下内容（以字串拼接的形式）
    //逻辑大致为：通过解析url获取参数和callback函数的名字，把需要返回的数据组成类似下面一段内容！
    flightHandler({
    "code": "CA1998",
    "price": 1780,
    "tickets": 5
    });
    //借鉴一段node的处理实例：
	var http = require("http")  
	var Url = require("url")  
  
	http.createServer(function(req,res){  
    		var path = req.url;  
    		var params = parseUrl(Url.parse(path).query);  
    		var data = {name:"swl",age:20};  
    		var script = params.func+"("+JSON.stringify(data)+")";  
    		res.write(script);  
    		res.end();  
	}).listen(3000)  
  
	//解析url  
	function parseUrl(url){  
    		var obj = {};  
    		var urls = url.split("&");  
    		for(var key in urls){  
        		var keyVal = urls[key].split("=");  
        		obj[keyVal[0]] = keyVal[1];  
    		}  
    	return obj;  
	}  	


#######使用jq的封装：
-------客户端
       <script type="text/javascript">
     jQuery(document).ready(function(){
        $.ajax({
             type: "get",
             async: false,
             url: "http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998",
             dataType: "jsonp",
             jsonp: "callback",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)
             jsonpCallback:"flightHandler",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据
             success: function(json){
                 alert('您查询到航班信息：票价： ' + json.price + ' 元，余票： ' + json.tickets + ' 张。');
             },
             error: function(){
                 alert('fail');
             }
         });
     });
     </script>



JSONP是跨域请求的一种方式，还有其他的方式：
服务器设置请求头
//允许的域
res.setHeader("Access-Control-Allow-Origin","*");	

//允许的header类型
res.setHeader("Access-Control-Allow-Headers", "Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild");

//允许的Methods类型
res.setHeader("Access-Control-Allow-Methods","PUT,POST,GET,DELETE,OPTIONS");

如果是iframe的跨域，可以通过修改location.domain为同一个域名（例如：baidu.com）来规避跨域问题！   	