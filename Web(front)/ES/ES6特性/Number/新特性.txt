===========================|__二进制和八进制__|============================
...0b（0B）二进制
...0o（0O）八进制


===========================|__EPSILON__|============================
...引用一个极小的常量 【2.220446049250313e-16】
...一般用这个常量来判断浮点数的计算结果，
...如果计算的结果小于这个常量，可以说明计算结果是正常的
---0.1 + 0.2 === 0.30000000000000004	//true;
---（0.1 + 0.2） - 0.3 < Number.EPSILON	//true


===========================|__isSafeInteger()__|============================
...js的能够准确表示的整数范围在-2^53 - 2^53之间（不含两个端点），超过这个范围就无法正确识别
---Math.pow(2,53) === Math.pow(2,53) + 1;
---//true;
...es6还提供了2个属性用于获取最大值和最小值；
---Number.MIN_SAFE_INTEGER	//-9007199254740991
---Number.MAX_SAFE_INTEGER	//9007199254740991

===========================|__isFinite()__|============================
...检查一个对象是否是非无穷大
...和ES5的全局方法isFinite区别在于：【不会强制转换参数类型,如果是非数值一律返回false】；
---Number.isFinite(1);	//true;
---Number.isFinite(Infinity);	//false;
---Number.isFinite(-Infinity);	//false;
---Number.isFinite("1");	//false;
---Number.isFinite(1);	//true;


===========================|__isNaN()__|============================
...检查一个对象是否是非数字；
...和ES5的全局方法isFinite区别在于：【不会强制转换参数类型,如果是非数值一律返回false】；
---Number.isNaN("a");	//false;
---Number.isNaN(1);	//false;
---Number.isNaN("1");	//false;
---Number.isNaN(NaN);	//true;

...***所以，这个方法好像没什么意义啊***
...只能用下面方法来使用了（感觉有点多余）
---Number.isNaN(Number("xxx"));


===========================|__parseInt()|parseFloat()__|============================
...功能相同，只不过是移植到Number对象下面，为了逐步模块化


===========================|__isInteger()__|============================
...检查是否是整数【不会强制转换参数类型,如果是非数值一律返回false】；



