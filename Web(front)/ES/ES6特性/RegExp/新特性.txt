===========================|__u修饰符__|============================
......匹配unicode,专门用来【处理长字符】(因为长字符在js里面的长度是2，但是实际上只有一个字符)
---/^\uD83D/u.test('\uD83D\uDC2A');//false
---/\u20BB/u.test('\u{20BB7}');	//false
......如果不加u,以上都会匹配成功
---/\u{3}/.test('uuu');	//true
---/\u{3}/u.test('uuu');//false

===========================|__y修饰符__|============================
......y修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都是从上一次匹配成功之后的下一个位置开始，不过不同的是，y修饰符只匹配头字符（相当于执行一次/^/），
......y修饰符的本意就是让（^）头部匹配在全局匹配中都有效；
---'##@#'.split(/#/y);	//["","","@"];
---'##@#'.split(/^#/);	//["","#@#"];
---'##@#'.split(/#/g);	//["","","@",""];

===========================|__flags属性__|============================
......flags方法可以列举出当前正则使用了哪些修饰符；
---var reg = /aaa/igmyu;	//"igmyu";

......当然，也可以调用对应的属性，以此验证是否使用了某个属性；
---reg.global	//true;(g)
---reg.ignoreCase	//true;(i)
---reg.sticky	//true;(y)
---reg.unicode	//true;(u)
---reg.multiline	//true;(m)

===========================|__escape方法__|============================
......一般使用来处理url的path部分内容；
---var path = "/path/to/source.html?search=query";
---RegExp.escape(path);
---//"\/path\/to\/source\.html\?search\=query"


