==================================================§video§========================================================
video : 丰富的API，简单易用；
==================================================§new input§========================================================
input type="color": 其实可以用作开发的调色板
input type="range": 比例尺滑动条，值得尝试的新玩意儿

<output> : 即时刷新是亮点，不过需要结合input使用，而且，需要JS配合！


==================================================§SVG§========================================================
SVG:矢量级的绘画工具；可存储最后坐标
	多使用标签和标签属性来完成图画；
	<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
	<rect style="fill:rgb(0,0,255); stroke-width:1px;stroke:rgb(0,0,0);" height="" width="">
	</rect>
	</svg>

==================================================§canvas§========================================================

canvas:像素级的绘画工具；不存储任何信息，结束符一出现就完结了


--§画小图标使用svg,游戏场景使用canvas§--

==================================================§web worker§========================================================
web worker线程 : 异步线程，把html元素的行为和JS的操作分开来执行；

//最简单的例子是，如果一个点击按钮之后，需要对一个数据循环100万次再刷新界面，这个时候就必须等待100万次循环完毕之后才会执行刷新事件；
//如果使用web worker，就会把js的循环扔进单独的线程里执行；

==================================================§geolocation §========================================================
geolocation : 获取浏览器当前的经纬度，常用的两个方法：--getCurrrentPosition  --watchPosition

exp:getCurrrentPosition -->
	//getCurrrentPosition()方法有三个参数，
	//前两个都是回调，第一个返回的是经纬度，第二个返回的是错误信息，
	//第三个是设置对象，分别设置是否精确位置（enableHighAccuracy: true），等待回调时长（timeout:50ms）,上一次取得坐标信息的有效时间	  ，如果时间到则重新获取最新坐标

	  if (navigator.geolocation) {
		  navigator.geolocation.getCurrentPosition(function (position) {
			  var latitude = position.coords.latitude;
			  var longitude = position.coords.longitude

			  document.getElementById("output").innerHTML = "纬度是；" + latitude + "<br>经度是：" + longitude;

		  }, function (error) {
			  document.getElementById("output").innerHTML = error.message || "获取地理位置的时候发生了错误。";
		  }, {
				 enableHighAccuracy: true,
				 timeout: 5000,
				 maximumAge: 25000
			 });
	  } else {
		  alert("你的浏览器不支持获取位置坐标")
	  }


exp:watchPosition -->
	//监听位置变更，如果坐标位置有改变，就会执行回调；
	//取消监听的方法和setInterval一致；

      var watchId = navigator.geolocation.watchPosition(function(position){
          drawMapCenteredAt(position.coords.latitude, position.coords.longitude);
      }, function(error) {
          console.log("Error code: " + error.code);
          console.log("Error message: " + error.message);
      });
      clearWatch(watchId);



==================================================§web storage §========================================================

1，sessionStorage   //多用于用户填写注册信息时，提交失败；或者翻页时记录前一页的滚动高度！关闭浏览器就会失效

		     #sessionStorage.setItem(key,value);var xx = sessionStorage.getItem(key);

2，localStorage	    //多用于发表评论时遇到浏览器崩溃；存在本地，重启系统才会清除；

		     #localStorage.setItem(key,value);var xx = localStorage.getItem(key);localStorage.clear();

总结：非必要功能可以借助这两个对象；

==================================================§ SQLLite §========================================================

#exp:

	var localdb = openDatabase('dbName','version','descrition',2 * 1024 * 1024); 	//创建数据库

	localdb.transaction(dunction(tx){						//操作数据库
		tx.executeSql('sqlLanguage',[],dataHandler,errorHandler);		//操作的时候需要SQLite知识
	})





	